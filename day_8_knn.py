# -*- coding: utf-8 -*-
"""DAY-8 KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WVUMLajI0Aq9OVs5OmR5dtc-8m6xOOjZ

DAY-8 KNN - Predict whether a person will have diabetes or not.
"""

import pandas as pd
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import f1_score
from sklearn.metrics import accuracy_score

dataset =pd.read_csv('diabetes.csv')
print(len(dataset))
print (dataset.head())

#replace zeroes

zero_not_accepted = ['Glucose', 'BloodPressure','SkinThickness','BMI','Insulin']

for column in zero_not_accepted:
    dataset[column]= dataset[column].replace(0,np.NaN)
    mean = int(dataset[column].mean(skipna = True))
    dataset[column]= dataset[column].replace(np.NaN, mean)

print(dataset['Glucose'])

#split the data

X = dataset.iloc[:, 0:8]
Y = dataset.iloc[:,8]
X_train , X_test, Y_train, Y_test = train_test_split(X,Y, random_state =0, test_size =0.2)

#feature scaling

sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

#define the model : K-NN

classifier = KNeighborsClassifier(n_neighbors =11, p=2, metric ='euclidean')

import math
math.sqrt(len(Y_test))

Y_pred = classifier.predict(X_test)
Y_pred

#evaluate the model

cm= confusion_matrix(Y_test, Y_pred)
print(cm)
print(f1_score(Y_test, Y_pred))

print(accuracy_score(Y_test, Y_pred)) #how many we got right or wrong